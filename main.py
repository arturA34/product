import logging
import asyncio
import random
import sys
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup

from config import BOT_TOKEN, AVAILABLE_LANGUAGES
from database import init_db, register_user, get_user_settings, update_user_settings, add_word, update_user_xp, update_completed_lessons
from keyboards import get_main_menu, get_language_selection, get_level_selection, get_settings_menu, get_lessons_menu, get_flashcards_menu, get_flashcard_review_controls
from content import lessons, default_flashcards, motivational_phrases

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class BotStates(StatesGroup):
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    START = State()
    MAIN_MENU = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    SETTINGS = State()
    SELECTING_LANGUAGE = State()
    SELECTING_LEVEL = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—Ä–æ–∫–æ–≤
    LESSONS_MENU = State()
    VIEWING_LESSON = State()
    QUIZ = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    FLASHCARDS_MENU = State()
    ADDING_CARD_WORD = State()
    ADDING_CARD_TRANSLATION = State()
    ADDING_CARD_EXAMPLE = State()
    REVIEWING_CARDS = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    VIEWING_PROGRESS = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
async def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    if not BOT_TOKEN:
        logger.error("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")
        return sys.exit(1)
        
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = message.from_user
        register_user(user.id, user.username, user.first_name, user.last_name)
        
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤. "
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞, –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —É—Ä–æ–∫–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å.\n\n"
            "–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∏–∑—É—á–∞—Ç—å:",
            reply_markup=get_language_selection()
        )
        await BotStates.SELECTING_LANGUAGE.set()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    @dp.callback_query(lambda c: c.data.startswith('select_language:'))
    async def process_language_selection(callback_query: types.CallbackQuery, state: FSMContext):
        language_code = callback_query.data.split(':')[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_settings(callback_query.from_user.id, "target_language", language_code)
        
        await callback_query.answer()
        await callback_query.message.edit_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª {AVAILABLE_LANGUAGES[language_code]}.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º:",
            reply_markup=get_level_selection()
        )
        
        await state.set_state(BotStates.SELECTING_LEVEL)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
    @dp.callback_query(lambda c: c.data.startswith('select_level:'))
    async def process_level_selection(callback_query: types.CallbackQuery, state: FSMContext):
        level = callback_query.data.split(':')[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_settings(callback_query.from_user.id, "language_level", level)
        
        # –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è
        update_user_xp(callback_query.from_user.id, 10)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        settings = get_user_settings(callback_query.from_user.id)
        target_language = settings[1]  # target_language –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        await callback_query.answer()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —É—Ä–æ–≤–Ω—è
        await callback_query.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞–ø—Ä—è–º—É—é
        main_menu = get_main_menu()
        await callback_query.message.bot.send_message(
            callback_query.from_user.id,
            f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: {AVAILABLE_LANGUAGES[target_language]}\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {level}\n\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞. –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=main_menu
        )
        
        await state.set_state(BotStates.MAIN_MENU)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    @dp.message(BotStates.MAIN_MENU)
    async def process_main_menu(message: types.Message, state: FSMContext):
        if message.text == "üè´ –£—Ä–æ–∫–∏":
            settings = get_user_settings(message.from_user.id)
            target_language = settings[1]  # target_language –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
            
            await message.answer(
                "–í—ã–±–µ—Ä–∏ —É—Ä–æ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
                reply_markup=get_lessons_menu(target_language)
            )
            await state.set_state(BotStates.LESSONS_MENU)
            
        elif message.text == "üìù –ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏":
            await message.answer(
                "–†–∞–∑–¥–µ–ª –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–ª–æ–≤:",
                reply_markup=get_flashcards_menu()
            )
            await state.set_state(BotStates.FLASHCARDS_MENU)
            
        elif message.text == "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å":
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ –ë–î
            await message.answer(
                "üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
                "‚úÖ –£—Ä–æ–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: 0\n"
                "üìö –°–ª–æ–≤ –≤—ã—É—á–µ–Ω–æ: 0\n"
                "üéØ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: 0\n"
                "‚≠ê –û—á–∫–æ–≤ –æ–ø—ã—Ç–∞: 10\n"
                "üî• –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è: 1 –¥–µ–Ω—å\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞–Ω–∏–º–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!"
            )
            
        elif message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await message.answer(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:",
                reply_markup=get_settings_menu()
            )
            await state.set_state(BotStates.SETTINGS)
            
        elif message.text == "‚ùì –ü–æ–º–æ—â—å":
            await message.answer(
                "ü§ñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
                "üè´ *–£—Ä–æ–∫–∏* ‚Äî –∏–∑—É—á–∞–π –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                "üìù *–ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏* ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–π –∏ –ø–æ–≤—Ç–æ—Ä—è–π –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                "üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å* ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
                "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* ‚Äî –Ω–∞—Å—Ç—Ä–æ–π –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è\n\n"
                "–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.",
                parse_mode="Markdown"
            )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é —É—Ä–æ–∫–æ–≤
    @dp.callback_query(lambda c: c.data.startswith('lesson:'))
    async def process_lesson_selection(callback_query: types.CallbackQuery, state: FSMContext):
        lesson_data = callback_query.data.split(':')
        language = lesson_data[1]
        lesson_id = int(lesson_data[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
        lesson = lessons[language][lesson_id]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ
        await state.update_data(current_lesson=lesson, language=language, lesson_id=lesson_id)
        
        await callback_query.answer()
        await callback_query.message.edit_text(
            f"{lesson['content']}\n\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å –∏–∑—É—á–µ–Ω–∏–µ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", 
                        callback_data=f"start_quiz:{language}:{lesson_id}"
                    )
                ]]
            )
        )
        
        await state.set_state(BotStates.VIEWING_LESSON)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
    @dp.callback_query(lambda c: c.data.startswith('start_quiz:'))
    async def start_quiz(callback_query: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        lesson = data['current_lesson']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
        await state.update_data(
            quiz_questions=lesson['quiz'],
            current_question=0,
            correct_answers=0
        )
        
        await callback_query.answer()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await show_question(callback_query.message, state)
        
        await state.set_state(BotStates.QUIZ)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞
    async def show_question(message: types.Message, state: FSMContext):
        data = await state.get_data()
        quiz_questions = data['quiz_questions']
        current_question = data['current_question']
        
        if current_question < len(quiz_questions):
            question = quiz_questions[current_question]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
            keyboard = []
            for i, option in enumerate(question['options']):
                keyboard.append([InlineKeyboardButton(
                    text=option, 
                    callback_data=f"quiz_answer:{i}"
                )])
            
            question_text = f"–í–æ–ø—Ä–æ—Å {current_question + 1}/{len(quiz_questions)}:\n\n{question['question']}"
            
            await message.edit_text(
                question_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
    @dp.callback_query(lambda c: c.data.startswith('quiz_answer:'))
    async def process_answer(callback_query: types.CallbackQuery, state: FSMContext):
        user_answer = int(callback_query.data.split(':')[1])
        
        data = await state.get_data()
        quiz_questions = data['quiz_questions']
        current_question = data['current_question']
        correct_answers = data['correct_answers']
        
        question = quiz_questions[current_question]
        correct = question['correct']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if user_answer == correct:
            correct_answers += 1
            await callback_query.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            await callback_query.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['options'][correct]}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_question += 1
        await state.update_data(
            current_question=current_question,
            correct_answers=correct_answers
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        if current_question < len(quiz_questions):
            await show_question(callback_query.message, state)
        else:
            # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            score_percent = int(correct_answers / len(quiz_questions) * 100)
            xp_earned = correct_answers * 5  # 5 XP –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_user_xp(callback_query.from_user.id, xp_earned)
            update_completed_lessons(callback_query.from_user.id)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É
            motivation = random.choice(motivational_phrases)
            
            result_text = (
                f"üìù –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}/{len(quiz_questions)}\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {score_percent}%\n"
                f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ XP: {xp_earned}\n\n"
                f"üî• {motivation}"
            )
            
            await callback_query.message.edit_text(
                result_text,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[
                        InlineKeyboardButton(
                            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Ä–æ–∫–∞–º", 
                            callback_data="back_to_lessons"
                        )
                    ]]
                )
            )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É—Ä–æ–∫–∞–º
    @dp.callback_query(lambda c: c.data == "back_to_lessons")
    async def back_to_lessons(callback_query: types.CallbackQuery, state: FSMContext):
        settings = get_user_settings(callback_query.from_user.id)
        target_language = settings[1]  # target_language –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        
        await callback_query.answer()
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏ —É—Ä–æ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
            reply_markup=get_lessons_menu(target_language)
        )
        
        await state.set_state(BotStates.LESSONS_MENU)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    @dp.callback_query(lambda c: c.data == "back_to_main")
    async def back_to_main(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer()
        await callback_query.message.delete()
        
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_main_menu()
        )
        
        await state.set_state(BotStates.MAIN_MENU)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é –∫–∞—Ä—Ç–æ—á–µ–∫
    @dp.callback_query(lambda c: c.data == "add_card")
    async def start_adding_card(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer()
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –Ω–∞ –∏–∑—É—á–∞–µ–º–æ–º —è–∑—ã–∫–µ:",
        )
        
        await state.set_state(BotStates.ADDING_CARD_WORD)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    @dp.message(BotStates.ADDING_CARD_WORD)
    async def process_card_word(message: types.Message, state: FSMContext):
        await state.update_data(card_word=message.text)
        
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞:")
        await state.set_state(BotStates.ADDING_CARD_TRANSLATION)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    @dp.message(BotStates.ADDING_CARD_TRANSLATION)
    async def process_card_translation(message: types.Message, state: FSMContext):
        await state.update_data(card_translation=message.text)
        
        await message.answer("–í–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        await state.set_state(BotStates.ADDING_CARD_EXAMPLE)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞
    @dp.message(BotStates.ADDING_CARD_EXAMPLE)
    async def process_card_example(message: types.Message, state: FSMContext):
        data = await state.get_data()
        word = data['card_word']
        translation = data['card_translation']
        
        example = "" if message.text == "/skip" else message.text
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
        settings = get_user_settings(message.from_user.id)
        target_language = settings[1]  # target_language –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_word(message.from_user.id, word, translation, target_language, example)
        
        # –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        update_user_xp(message.from_user.id, 2)
        
        await message.answer(
            f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"–°–ª–æ–≤–æ: {word}\n"
            f"–ü–µ—Ä–µ–≤–æ–¥: {translation}\n"
            f"–ü—Ä–∏–º–µ—Ä: {example or '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}\n\n"
            f"–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=get_flashcards_menu()
        )
        
        await state.set_state(BotStates.FLASHCARDS_MENU)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    @dp.callback_query(lambda c: c.data == "review_cards")
    async def start_reviewing_cards(callback_query: types.CallbackQuery, state: FSMContext):
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ –ë–î
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        settings = get_user_settings(callback_query.from_user.id)
        target_language = settings[1]  # target_language –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        cards = default_flashcards.get(target_language, default_flashcards["en"])
        
        if not cards:
            await callback_query.answer()
            await callback_query.message.answer(
                "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(review_cards=cards, current_card_index=0)
        
        await callback_query.answer()
        await show_flashcard(callback_query.message.bot, callback_query.from_user.id, state)
        
        await state.set_state(BotStates.REVIEWING_CARDS)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    async def show_flashcard(bot, user_id, state):
        data = await state.get_data()
        cards = data['review_cards']
        index = data['current_card_index']
        
        if index < len(cards):
            card = cards[index]
            
            card_text = (
                f"–ö–∞—Ä—Ç–æ—á–∫–∞ {index + 1}/{len(cards)}:\n\n"
                f"üìù *{card['word']}*\n\n"
                f"üëÜ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∫–æ–≥–¥–∞ –≤—Å–ø–æ–º–Ω–∏—à—å –ø–µ—Ä–µ–≤–æ–¥"
            )
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥", 
                        callback_data="show_translation"
                    )
                ]]
            )
            
            await bot.send_message(
                user_id,
                card_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
    @dp.callback_query(lambda c: c.data == "show_translation")
    async def show_card_translation(callback_query: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        cards = data['review_cards']
        index = data['current_card_index']
        
        card = cards[index]
        
        translation_text = (
            f"–ö–∞—Ä—Ç–æ—á–∫–∞ {index + 1}/{len(cards)}:\n\n"
            f"üìù *{card['word']}*\n"
            f"üî§ –ü–µ—Ä–µ–≤–æ–¥: *{card['translation']}*\n\n"
            f"üìö –ü—Ä–∏–º–µ—Ä: _{card['example']}_\n\n"
            f"–ü–æ–º–Ω–∏—à—å –ª–∏ —Ç—ã —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É?"
        )
        
        await callback_query.answer()
        await callback_query.message.edit_text(
            translation_text,
            parse_mode="Markdown",
            reply_markup=get_flashcard_review_controls()
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
    @dp.callback_query(lambda c: c.data.startswith('card_response:'))
    async def process_card_response(callback_query: types.CallbackQuery, state: FSMContext):
        response = callback_query.data.split(':')[1]
        
        data = await state.get_data()
        index = data['current_card_index']
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        
        # –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
        if response == "success":
            update_user_xp(callback_query.from_user.id, 1)
            await callback_query.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! +1 XP")
        else:
            await callback_query.answer("–≠—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è —Å–Ω–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
        index += 1
        await state.update_data(current_card_index=index)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π
        await callback_query.message.delete()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        if index < len(data['review_cards']):
            await show_flashcard(callback_query.message.bot, callback_query.from_user.id, state)
        else:
            # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            motivation = random.choice(motivational_phrases)
            
            await callback_query.message.answer(
                f"üéâ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                f"–¢—ã –ø–æ–≤—Ç–æ—Ä–∏–ª {len(data['review_cards'])} –∫–∞—Ä—Ç–æ—á–µ–∫.\n\n"
                f"üî• {motivation}",
                reply_markup=get_flashcards_menu()
            )
            await state.set_state(BotStates.FLASHCARDS_MENU)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    @dp.callback_query(lambda c: c.data == "finish_review")
    async def finish_reviewing_cards(callback_query: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        reviewed_count = data['current_card_index']
        
        await callback_query.answer()
        await callback_query.message.delete()
        
        await callback_query.message.answer(
            f"üéâ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ—Å—Ä–æ—á–Ω–æ.\n\n"
            f"–¢—ã –ø–æ–≤—Ç–æ—Ä–∏–ª {reviewed_count} –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ {len(data['review_cards'])}.",
            reply_markup=get_flashcards_menu()
        )
        
        await state.set_state(BotStates.FLASHCARDS_MENU)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    @dp.message(Command("help"))
    async def cmd_help(message: types.Message):
        await message.answer(
            "ü§ñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
            "üè´ *–£—Ä–æ–∫–∏* ‚Äî –∏–∑—É—á–∞–π –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞\n"
            "üìù *–ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏* ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–π –∏ –ø–æ–≤—Ç–æ—Ä—è–π –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞\n"
            "üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å* ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* ‚Äî –Ω–∞—Å—Ç—Ä–æ–π –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ\n"
            "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞)",
            parse_mode="Markdown"
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset
    @dp.message(Command("reset"))
    async def cmd_reset(message: types.Message, state: FSMContext):
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.clear()
        
        await message.answer(
            "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start"
        )
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main()) 